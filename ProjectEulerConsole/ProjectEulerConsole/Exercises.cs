using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProjectEulerConsole
{
    class Exercises
    {

        /// <summary>
        /// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
        /// The sum of these multiples is 23.
        /// Find the sum of all the multiples of 3 or 5 below 1000.
        /// </summary>
        public static double ExerciseOne(int maxNum)
        {
            List<double> numberList = new List<double>();
            for (int i = 1; i < maxNum; i++)
            {
                if (i % 3 == 0 || i % 5 == 0)
                {
                    numberList.Add(i);
                }

            }
            double result = numberList.Sum();
            return result;
        }

        /// <summary>
        /// Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
        /// By starting with 1 and 2, the first 10 terms will be:
        /// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        /// By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
        /// find the sum of the even-valued terms.
        /// </summary>
        /// <param name="maxNum"></param>
        /// <returns></returns>
        public static double ExerciseTwo(int maxNum)
        {
            double previousNum = 1;
            double currentNum = 1;
            List<double> fibList = new List<double>();
            while (currentNum < maxNum)
            {
                fibList.Add(currentNum);
                double temp = currentNum;
                currentNum += previousNum;
                previousNum = temp;
            }
            List<double> evenList = new List<double>();
            foreach (double fib in fibList)
            {
                if (fib % 2 == 0)
                {
                    evenList.Add(fib);
                }
            }
            return evenList.Sum();
        }

        /// <summary>
        /// The prime factors of 13195 are 5, 7, 13 and 29.
        /// What is the largest prime factor of the number 600851475143 ?
        /// </summary>
        /// <param name="maxNum"></param>
        /// <returns></returns>
        public static double ExerciseThree(double maxNum)
        {
            double square = Math.Sqrt(maxNum);
            List<double> primelist = new List<double>();
            for (double i = 3; i < square; i++)
            {
                if (i % 2 == 0) { continue; }
                if (maxNum % i == 0)
                {
                    bool isPrime = true;
                    foreach (double prime in primelist)
                    {
                        if (i % prime == 0)
                        {
                            isPrime = false;
                            break;
                        }
                    }
                    if (isPrime)
                    {
                        primelist.Add(i);
                    }
                }
            }
            return primelist.Last();
        }

        /// <summary>
        /// A palindromic number reads the same both ways. 
        /// The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
        /// Find the largest palindrome made from the product of two 3-digit numbers.
        /// </summary>
        /// <param name="digitNum"></param>
        /// <returns></returns>
        public static double ExerciseFour(int digitNum)
        {
            string maxNumString = "1";
            for (int i = 0; i < digitNum; i++)
            {
                maxNumString += "0";
            }
            //sets number of digits ie 1000 will be for 3 digits
            int maxNumInt = int.Parse(maxNumString);
            //to make looping more efficient so numbers won't be double checked
            int startNum = 1;
            double biggestPal = 0;
            for (int i = 1; i < maxNumInt; i++)
            {
                for (int j = startNum; j < maxNumInt; j++)
                {
                    //check if palindrome
                    int multiply = i * j;
                    string multiplyString = multiply.ToString();
                    char[] charArray = multiplyString.ToCharArray();
                    int charNum = 0;
                    charNum = charArray.Length - 1;
                    bool isPal = true;
                    for (int k = 0; k < (charArray.Length / 2); k++)
                    {
                        if (!(charArray[k] == charArray[charNum]))
                        {
                            isPal = false;
                            break;
                        }
                        charNum--;
                    }
                    if (isPal == true)
                    {
                        if (biggestPal < multiply)
                        {
                            biggestPal = multiply;
                        }
                    }

                }
                startNum++;
            }
            return biggestPal;
        }
        /// <summary>
        /// 2520 is the smallest number that can be divided by each of the 
        /// numbers from 1 to 10 without any remainder.
        /// What is the smallest positive number that is evenly divisible 
        /// by all of the numbers from 1 to 20?
        /// </summary>
        /// <param name="maxNum"></param>
        /// <returns></returns>
        public static double ExerciseFive(int maxNum)
        {
            for (double i = maxNum; i > 0; i++)
            {
                bool evenDivide = true;
                for (int j = 1; j <= maxNum; j++)
                {
                    if (!(i % j == 0))
                    {
                        evenDivide = false;
                        break;
                    }
                }
                if (evenDivide)
                {
                    return i;
                }
            }
            return 0;
        }

        /// <summary>
        /// The sum of the squares of the first ten natural numbers is,
        /// 1^2 + 2^2 + ... + 10^2 = 385
        /// The square of the sum of the first ten natural numbers is,
        /// (1 + 2 + ... + 10)^2 = 55^2 = 3025
        /// Hence the difference between the sum of the squares of the 
        /// first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
        /// Find the difference between the sum of the squares of 
        /// the first one hundred natural numbers and the square of the sum.
        /// </summary>
        /// <param name="maxNum"></param>
        /// <returns></returns>
        public static double ExerciseSix(int maxNum)
        {
            double sumSquare = 0;
            double runningSum = 0;
            for (int i = 1; i <= maxNum; i++)
            {
                sumSquare += Math.Pow(i, 2);
                runningSum += i;
            }
            return Math.Pow(runningSum, 2) - sumSquare;
        }

        /// <summary>
        /// By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13,
        /// we can see that the 6th prime is 13.
        /// What is the 10 001st prime number?
        /// </summary>
        /// <param name="primeTerm"></param>
        /// <returns></returns>
        public static double ExerciseSeven(int primeTerm)
        {
            List<double> primeList = new List<double>();
            primeList.Add(2);
            double i = 3;
            while (primeList.Count < primeTerm)
            {
                bool isPrime = true;
                foreach (double prime in primeList)
                {
                    if (i % prime == 0)
                    {
                        isPrime = false;
                        break;
                    }
                }
                if (isPrime)
                {
                    primeList.Add(i);
                }
                i++;
            }
            return primeList.Last();
        }

        /// <summary>
        /// The four adjacent digits in the 1000-digit number that 
        /// have the greatest product are 9 × 9 × 8 × 9 = 5832.
        /// 
         //73167176531330624919225119674426574742355349194934
         //96983520312774506326239578318016984801869478851843
         //85861560789112949495459501737958331952853208805511
         //12540698747158523863050715693290963295227443043557
         //66896648950445244523161731856403098711121722383113
         //62229893423380308135336276614282806444486645238749
         //30358907296290491560440772390713810515859307960866
         //70172427121883998797908792274921901699720888093776
         //65727333001053367881220235421809751254540594752243
         //52584907711670556013604839586446706324415722155397
         //53697817977846174064955149290862569321978468622482
         //83972241375657056057490261407972968652414535100474
         //82166370484403199890008895243450658541227588666881
         //16427171479924442928230863465674813919123162824586
         //17866458359124566529476545682848912883142607690042
         //24219022671055626321111109370544217506941658960408
         //07198403850962455444362981230987879927244284909188
         //84580156166097919133875499200524063689912560717606
         //05886116467109405077541002256983155200055935729725
         //71636269561882670428252483600823257530420752963450
        /// 
        /// Find the thirteen adjacent digits in the 1000-digit number 
        /// that have the greatest product.What is the value of this product?
        /// </summary>
        /// <param name="adjDigits"></param>
        /// <returns></returns>
        public static double ExerciseEight(int adjDigits)
        {
            string numString = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
            double result = 0;
            var doubLinq = numString.Select(x => x.ToString());
            List<int> numArray = new List<int>();
            foreach (var x in doubLinq)
            {
                int temp;
                int.TryParse(x, out temp);
                numArray.Add(temp);
            }
            for (int i = 0; i < numArray.Count-(adjDigits +1); i++)
            {
                double multiply =1;
                for (int j = i; j < i+adjDigits; j++)
                {
                    multiply *= numArray[j];
                }
                if(multiply > result)
                {
                    result = multiply;
                }
            }
            return result;
        }

        public static double ExerciseNine(int addEqual)
        {
            int a, b;
            double c, a2, b2, c2;
            double response = 0;
            for ( a = 1; a < addEqual; a++)
            {
                for ( b = a; b < addEqual; b++)
                {
                    a2 = Math.Pow(a, 2);
                    b2 = Math.Pow(b, 2);
                    c2 = a2 + b2;
                    c = Math.Sqrt(c2);
                    double result = a + b + c;
                    if (result == addEqual)
                    {
                        response = a * b * c;
                        break;
                    }
                }
            }
            return response;
        }
    }
}
